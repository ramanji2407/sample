USE PRACTICE;
CREATE TABLE EMS(ID INT PRIMARY KEY  , F_NAME VARCHAR(40),L_NAME VARCHAR(40),  EMPLOYMENTTYPE VARCHAR(30), Dsignation varchar(50),EMAIL varchar(60),phone_no long);

insert into ems values(11,'CHADALAVADA','KAVYA','PART TIME','INTERN','CHKAVYA455@gmail.com',9887480880,'6000');
alter table ems
add column salary decimal(10,2);
update ems
set salary=46000
where id=8;

select* from  PARTTIMELOG;

CREATE TABLE PARTTIMELOG(ID INT primary KEY , COSTPERHOUR INT, NOOFHOURSWORKED INT, EMPLOYID INT,  FOREIGN KEY (EMPLOYID) REFERENCES ems(ID));
INSERT INTO PARTTIMELOG VALUES(1,100,50,9),(2,100,59,10),(3,100,60,11);
alter table ems
drop column salary;
drop table FULTIMELOG;
CREATE TABLE FULTIMELOG(ID INT primary KEY , NOOFLEAVES INT check(NOOFLEAVES<=30),EMPLOYID INT, BASICPAY decimal(10,2), FOREIGN KEY (EMPLOYID) REFERENCES ems(ID));

INSERT into FULTIMELOG VALUES(1,3,1,30000 ),(2,0,2,50000),(3,5,3,60000),(4,0,4,35000);

/*COUNT OF EMPLOYEE BY  EMPLOYMENTTYPE*/
  
  SELECT EMPLOYMENTTYPE,COUNT(*) AS COUNTOFEMPLOYEEBYEMPLOYMENTTYPE FROM ems group by EMPLOYMENTTYPE;
  /*COUNT OF EMPLOYEE BY  EMPLOYMENTTYPE HAVING COUNT IS 4*/
  
  SELECT EMPLOYMENTTYPE,COUNT(*) AS COUNTOFEMPLOYEEBYEMPLOYMENTTYPE FROM ems group by EMPLOYMENTTYPE HAVING COUNT(*)=4;
/*MAXIMUM SALARY IN EMS TABLE*/
select MAX(SALARY ) from EMS;
/*MINIMUIMUM SALARY IN EMS TABLE*/
select MIN(SALARY ) from EMS;
/*MAXIMUMSALARY IN EMS TABLE FOR PART TIME EMPLOYE*/
select MAX(SALARY ) from EMS WHERE EMPLOYMENTTYPE='PART TIME' ;
/*MINIMUIMUMSALARY IN EMS TABLE FOR PART TIME EMPLOYE*/
select MIN(SALARY ) from EMS WHERE EMPLOYMENTTYPE='PART TIME' ;
/*MAXIMUMSALARY IN EMS TABLE FOR FULL TIME EMPLOYE*/
select MAX(SALARY ) from EMS WHERE EMPLOYMENTTYPE='FULLTIME' ;
/*MINIMUIMUMSALARY IN EMS TABLE FOR FULL TIME EMPLOYE*/
select MIN(SALARY ) from EMS WHERE EMPLOYMENTTYPE='FULLTIME' ;
/* AVERAGE SALARY OF EMPLOYS*/
SELECT avg(SALARY) FROM EMS;
/*SUM OF THE SALARY OF EMPLOY*/
SELECT SUM(SALARY) FROM EMS;


/*JOINS*/
/*NORMAL INNERJOIN TO DISPALY DETAILS OF FULL TIME*/
SELECT * FROM EMS AS E inner join FULTIMELOG AS F ON E.ID=F.EMPLOYID;
/*NORMAL INNERJOIN TO DISPALY DETAILS OF FULL TIME*/
SELECT * FROM EMS AS E INNER join PARTTIMELOG AS P ON E.ID=P.EMPLOYID;
/*  SELECT EMPLOY DETAILS GRETER THAN OF AVERAGE SALARY OF EMPOYES*/
SELECT  * FROM EMS AS E inner join FULTIMELOG AS F ON E.ID=F.EMPLOYID WHERE SALARY>(SELECT AVG(SALARY) FROM EMS);
/*  ASCENDING AND DESCENDINGORDER OF FULL TIME EMPLOYE SALARY*/
SELECT  * FROM EMS AS E inner join FULTIMELOG AS F ON E.ID=F.EMPLOYID order by SALARY;
SELECT  * FROM EMS AS E inner join FULTIMELOG AS F ON E.ID=F.EMPLOYID order by SALARY DESC;
/*  ASCENDING AND DESCENDINGORDER OF PART TIME EMPLOYE SALARY*/

SELECT * FROM EMS AS E INNER join PARTTIMELOG AS P ON E.ID=P.EMPLOYID order by SALARY;
SELECT * FROM EMS AS E INNER join PARTTIMELOG AS P ON E.ID=P.EMPLOYID order by SALARY DESC;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
USE PRACTICE;
CREATE TABLE EMS(ID INT PRIMARY KEY  , F_NAME VARCHAR(40),L_NAME VARCHAR(40),  EMPLOYMENTTYPE VARCHAR(30), Dsignation varchar(50),EMAIL varchar(60),phone_no long);

insert into ems values(11,'CHADALAVADA','KAVYA','PART TIME','INTERN','CHKAVYA455@gmail.com',9887480880,'6000');
alter table ems
add column salary decimal(10,2);
update ems
set salary=46000
where id=8;

select* from  PARTTIMELOG;

CREATE TABLE PARTTIMELOG(ID INT primary KEY , COSTPERHOUR INT, NOOFHOURSWORKED INT, EMPLOYID INT,  FOREIGN KEY (EMPLOYID) REFERENCES ems(ID));
INSERT INTO PARTTIMELOG VALUES(1,100,50,9),(2,100,59,10),(3,100,60,11);
alter table ems
drop column salary;
drop table FULTIMELOG;
CREATE TABLE FULTIMELOG(ID INT primary KEY , NOOFLEAVES INT check(NOOFLEAVES<=30),EMPLOYID INT, BASICPAY decimal(10,2), FOREIGN KEY (EMPLOYID) REFERENCES ems(ID));

INSERT into FULTIMELOG VALUES(1,3,1,30000 ),(2,0,2,50000),(3,5,3,60000),(4,0,4,35000);

/*COUNT OF EMPLOYEE BY  EMPLOYMENTTYPE*/
  
  SELECT EMPLOYMENTTYPE,COUNT(*) AS COUNTOFEMPLOYEEBYEMPLOYMENTTYPE FROM ems group by EMPLOYMENTTYPE;
  /*COUNT OF EMPLOYEE BY  EMPLOYMENTTYPE HAVING COUNT IS 4*/
  
  SELECT EMPLOYMENTTYPE,COUNT(*) AS COUNTOFEMPLOYEEBYEMPLOYMENTTYPE FROM ems group by EMPLOYMENTTYPE HAVING COUNT(*)=4;
/*MAXIMUM SALARY IN EMS TABLE*/
select MAX(SALARY ) from EMS;
/*MINIMUIMUM SALARY IN EMS TABLE*/
select MIN(SALARY ) from EMS;
/*MAXIMUMSALARY IN EMS TABLE FOR PART TIME EMPLOYE*/
select MAX(SALARY ) from EMS WHERE EMPLOYMENTTYPE='PART TIME' ;
/*MINIMUIMUMSALARY IN EMS TABLE FOR PART TIME EMPLOYE*/
select MIN(SALARY ) from EMS WHERE EMPLOYMENTTYPE='PART TIME' ;
/*MAXIMUMSALARY IN EMS TABLE FOR FULL TIME EMPLOYE*/
select MAX(SALARY ) from EMS WHERE EMPLOYMENTTYPE='FULLTIME' ;
/*MINIMUIMUMSALARY IN EMS TABLE FOR FULL TIME EMPLOYE*/
select MIN(SALARY ) from EMS WHERE EMPLOYMENTTYPE='FULLTIME' ;
/* AVERAGE SALARY OF EMPLOYS*/
SELECT avg(SALARY) FROM EMS;
/*SUM OF THE SALARY OF EMPLOY*/
SELECT SUM(SALARY) FROM EMS;


/*JOINS*/
/*NORMAL INNERJOIN TO DISPALY DETAILS OF FULL TIME*/
SELECT * FROM EMS AS E inner join FULTIMELOG AS F ON E.ID=F.EMPLOYID;
/*NORMAL INNERJOIN TO DISPALY DETAILS OF FULL TIME*/
SELECT * FROM EMS AS E INNER join PARTTIMELOG AS P ON E.ID=P.EMPLOYID;
/*  SELECT EMPLOY DETAILS GRETER THAN OF AVERAGE SALARY OF EMPOYES*/
SELECT  * FROM EMS AS E inner join FULTIMELOG AS F ON E.ID=F.EMPLOYID WHERE SALARY>(SELECT AVG(SALARY) FROM EMS);
/*  ASCENDING AND DESCENDINGORDER OF FULL TIME EMPLOYE SALARY*/
SELECT  * FROM EMS AS E inner join FULTIMELOG AS F ON E.ID=F.EMPLOYID order by SALARY;
SELECT  * FROM EMS AS E inner join FULTIMELOG AS F ON E.ID=F.EMPLOYID order by SALARY DESC;
/*  ASCENDING AND DESCENDINGORDER OF PART TIME EMPLOYE SALARY*/

SELECT * FROM EMS AS E INNER join PARTTIMELOG AS P ON E.ID=P.EMPLOYID order by SALARY;
SELECT * FROM EMS AS E INNER join PARTTIMELOG AS P ON E.ID=P.EMPLOYID order by SALARY DESC;

USE PRACTICE;

create index nameindex
on 
ems(F_NAME,L_NAME);
SELECT*FROM EMS WHERE F_NAME='PASUPULETI' ORDER BY SALARY DESC;

/*NTHHIGHESTSALARY*/
SELECT*FROM EMS AS E1 WHERE 3-1=(select COUNT(*) FROM EMS AS E2 WHERE E1.SALARY<E2.SALARY);




DELIMITER //
CREATE procedure SALARYFIND3(in SALARAY DECIMAL(10,2)) 
BEGIN
SELECT *FROM EMS WHERE ems.SALARY >=SALARAY;
END
//
CALL SALARYFIND3(20000);

create view nameofemploy
as select F_NAME,L_NAME FROM EMS;
SELECT *FROM NAMEOFEMPLOY;

CREATE TRIGGER UPDATESALARY1234
AFTER UPDATE 
ON EMS
FOR EACH ROW
SET NEW.SALARY=NEW.SALARY+100;

UPDATE EMS
SET SALARY=27000
WHERE ID=1;


DROP TRIGGER UpdateSalary_Trigger;
UPDATE fultimelog
SET BASICPAY='40000.00'
WHERE ID=1;

DELIMITER //
CREATE TRIGGER UpdateSalary_Trigger
AFTER UPDATE ON FULTIMELOG
FOR EACH ROW
BEGIN
  UPDATE EMS
  SET SALARY = NEW.BASICPAY - (NEW.BASICPAY / 30 * NEW.NOOFLEAVES)
  WHERE ID = NEW.EMPLOYID;
END;
//
DELIMITER //
CREATE TRIGGER UpdateSalary_TriggerPARTTIME
AFTER UPDATE ON PARTTIMELOG
FOR EACH ROW
BEGIN
  UPDATE EMS
  SET SALARY = NEW.COSTPERHOUR*NEW.NOOFHOURSWORKED
  WHERE ID = NEW.EMPLOYID;
END;
//
DELIMITER //
CREATE TRIGGER InsertSalary_TriggerFULLTIME
AFTER INSERT ON FULTIMELOG
FOR EACH ROW
BEGIN
  UPDATE EMS
  SET SALARY = NEW.BASICPAY - (NEW.BASICPAY / 30 * NEW.NOOFLEAVES)
  WHERE ID = NEW.EMPLOYID;
END;
//
DELIMITER //
CREATE TRIGGER InsertSalary_TriggerPARTTIME
AFTER INSERT ON PARTTIMELOG
FOR EACH ROW
BEGIN
  UPDATE EMS
  SET SALARY = NEW.NOOFHOURSWORKED*NEW.COSTPERHOUR
  WHERE ID = NEW.EMPLOYID;
END;
//
desc TABLE fultimelog;


select * FROM fultimelog;
select* from ems;
select * FROM parttimelog;

UPDATE parttimelog
SET COSTPERHOUR=100
WHERE ID=1;

INSERT INTO EMS VALUES(12,'DAVVURI','CHANDU','FULLTIME','DEVLOPER','dchand123@gmail.com','9392841920',0)

insert into fultimelog values(5,8, 12,100000)
use practice;
create table designation (id int primary key, designation varchar(30));
insert into designation values(1,'Trainee'),(2,'Intern'),(3,'Jrdevloper'),(4,'Srdevloper'),(5,'Manager'),(6,'Hr');

ALTER TABLE EMS
 add COLUMN Designatinid int ;
 ALTER TABLE EMSems_Designatinid
add constraint ems_Designatinid foreign key(Designatinid) references designation(id);
ALTER TABLE EMS
 rename COLUMN Designatinid to Dsignationid;
 select* from designation;
 update ems
 set Dsignationid=5
 where id =12;
 select*from ems;










select fultimelog;
select* from ems;
